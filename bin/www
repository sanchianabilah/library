#!/usr/bin/env node

const app = require('../app'); // Mengimpor instansi Express dari app.js
const debug = require('debug')('library:server');
const http = require('http');

// Normalisasi port ke nomor integer.
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Buat server HTTP dan dengarkan pada port yang diberikan.
const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

console.log(`Server berjalan di port ${port}`);

/**
 * Normalisasi port ke nomor integer, dan memberikan port jika tidak valid.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

/**
 * Event listener untuk 'error' event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Berbagai jenis kesalahan yang dapat ditangani.
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener untuk 'listening' event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
